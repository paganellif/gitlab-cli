plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'application'
    id "nebula.ospackage" version "9.1.1"
    id 'jacoco'
}

group = 'me.filippopaganelli'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/info.picocli/picocli
    implementation 'info.picocli:picocli:4.6.3'

    implementation "io.ktor:ktor-client-core:1.6.8"
    implementation "io.ktor:ktor-client-cio:1.6.8"
    implementation "io.ktor:ktor-client-serialization:1.6.8"
    implementation "io.ktor:ktor-client-gson:2.0.0"

    implementation 'io.github.microutils:kotlin-logging-jvm:2.1.21'
    implementation 'ch.qos.logback:logback-classic:1.2.11'

    implementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-junit
    testImplementation 'io.cucumber:cucumber-junit:7.2.3'

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.2'
}

compileKotlin {
    kotlinOptions.jvmTarget = '16'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '16'
}

test {
    useJUnitPlatform{
        includeEngines("junit-jupiter", "junit-vintage")
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test // tests are required to run before generating the report
}

jar {
    manifest {
        attributes(
                'Main-Class': 'it.paganellif.gitlabcli.MainKt'
        )
    }
    duplicatesStrategy(DuplicatesStrategy.WARN)
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

application {
    // Define the main class for the application.
    mainClass = 'it.paganellif.gitlabcli.MainKt'
}